import matplotlib as mpl
import matplotlib.gridspec as gridspec
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from matplotlib import tight_layout
import numpy as np
import os
from itertools import repeat
mpl.style.use('seaborn-poster')
sns.set_palette(sns.color_palette(['#7570b3', '#d95f02', '#1b9e77','#0000FF']))
# sns.palplot(sns.color_palette(['#7570b3', '#d95f02', '#1b9e77']))

font = {'family': 'serif',  # 字体族
        'style': 'normal',   # 字体样式
        'size': 12,          # 字体大小
        'weight': 'bold'}
mpl.rc('font', **font)


def init_gridspec(nrow, ncol, nax) :
    fig = plt.figure(figsize=(15, 15))
    gs = gridspec.GridSpec(nrow, ncol, figure=fig)
    axes = []
    for i in range(nax) :
        ax=plt.subplot(gs[i//ncol, i%ncol])
        ax.grid(linewidth=0.5, linestyle=':')
        axes.append(ax)

    return fig, axes

def adjust_gridspec() :
    plt.subplots_adjust(wspace=0.3, hspace=0)
    font = {'family': 'serif',  # 字体族
        'style': 'normal',   # 字体样式
        'size': 12,          # 字体大小
        'weight': 'bold'}
    mpl.rc('font', **font)
    #plt.tight_layout()

def show_gridspec() :
    plt.show()

def set_square_aspect(axes) :
    x0,x1 = axes.get_xlim()
    y0,y1 = axes.get_ylim()
    axes.set_aspect(abs(x1-x0)/abs(y1-y0))

def adjust_size(vals):
    random_values = np.random.uniform(0.75, 1.0, size=vals.shape)
    vals*=2
    result = np.where(vals > 1, random_values, vals)
    return result

def save_axis_in_file(fig, ax, dirname, filename):
    ax.set_title("")

    renderer = tight_layout.get_renderer(fig)
    inset_tight_bbox = ax.get_tightbbox(renderer)
    extent = inset_tight_bbox.transformed(fig.dpi_scale_trans.inverted())
    # plt.savefig(os.path.join(dirname, filename + '.png'), bbox_inches=extent, dpi=1000)

    renderer = tight_layout.get_renderer(fig)
    inset_tight_bbox = ax.get_tightbbox(renderer)
    extent = inset_tight_bbox.transformed(fig.dpi_scale_trans.inverted())
    # plt.savefig(os.path.join(dirname, filename + '.svg'), bbox_inches=extent)

    if 'sst' not in dirname and 'readmission' not in dirname:
        ax.set_xlabel(" ")
        ax.set_ylabel(" ")
        
    renderer = tight_layout.get_renderer(fig)
    inset_tight_bbox = ax.get_tightbbox(renderer)
    extent = inset_tight_bbox.transformed(fig.dpi_scale_trans.inverted())
    plt.savefig(os.path.join(dirname, filename + '.pdf'), bbox_inches=extent)

def annotate(ax, xlabel=None, ylabel=None, title=None, xlim=None, ylim=None, legend='upper left') :
    if xlabel is not None : ax.set_xlabel(xlabel, fontdict=font)
    if ylabel is not None : ax.set_ylabel(ylabel, fontdict=font)
    ax.tick_params(labelsize=7)
    if title is not None : ax.set_title(title)
    if xlim is not None : ax.set_xlim(*xlim)
    if ylim is not None : ax.set_ylim(*ylim)
    x0,x1 = ax.get_xlim()
    y0,y1 = ax.get_ylim()
    x_ticks=[i for i in range(0,41,10)]
    if y1<10:
        y_ticks=[i for i in [0,0.25,0.5,0.75,1]]
    else:
        y_ticks=[0]+[i for i in np.arange(y1/4,y1*1.1,y1/4).tolist()]
    ax.set_xticks(x_ticks)
    ax.set_yticks(y_ticks)
    ax.tick_params(axis='x', labelsize=7) 
    ax.tick_params(axis='y', labelsize=7) 
    ax.spines['left'].set_position('zero')  
    ax.spines['bottom'].set_position('zero')
    set_square_aspect(ax)
    sns.despine(ax=ax)
    if legend is None and ax.get_legend() is not None : ax.get_legend().remove()

###########################################################################################################################

def plot_violin_by_class(ax, X_vals, Y_vals, yhat, xlim, bins=4) :
    bins = xlim[0] + np.arange(bins+1) / bins * (xlim[1]+1e-4 - xlim[0])
    xbins = np.digitize(X_vals, bins[1:])
    order = ["[" + "{:.2f}".format(bins[p]) + ',\n' + "{:.2f}".format(bins[p+1]) + ")" for p in np.arange(len(bins)-1)]

    xnames = []
    for p in xbins :
        xnames.append("[" + "{:.2f}".format(bins[p]) + ',\n' + "{:.2f}".format(bins[p+1]) + ")")

    classes = np.zeros((len(yhat,)))
    if len(yhat.shape) == 1 or yhat.shape[1] == 1:
        yhat = yhat.flatten()
        yhat = np.round(yhat)
        unique_y = np.sort(np.unique(yhat))
        if len(unique_y) < 4 :
            classes = yhat

    df = pd.DataFrame({'bin' : xnames, 'val' : Y_vals, 'class' : classes})
    sns.violinplot(data=df, y="bin", x="val", hue="class", ax=ax, linewidth=1.0, order=order, cut=0.02, inner='quartiles', dodge=True)

    ax.get_legend().remove()

def plot_scatter_by_class(ax, X_vals, Y_vals, yhat) :
    classes = np.zeros((len(yhat,)))
    if len(yhat.shape) == 1 or yhat.shape[1] == 1:
        yhat = yhat.flatten()
        yhat = np.round(yhat)
        unique_y = np.sort(np.unique(yhat))
        if len(unique_y) <= 4 :
            classes = yhat
    colors = ['#7570b3', '#d95f02', '#1b9e77','#77ffff']
    unique_y = np.sort(np.unique(classes))
    line=[]
    df = pd.DataFrame({'bin' : X_vals, 'val' : Y_vals, 'class' : classes})
    if len(unique_y) <= 1 :
        sns.scatterplot(x='bin', y='val', data=df, ax=ax, alpha=1.0, s=30, linewidth=0)
    else :
        ax.grid(True)
        dataset=["emotion","sst","hate","rotten_tomatoes"]
        for i in range(len(X_vals)):
            if (i+1)%40!=0:
                line_tmp,=ax.plot([X_vals[i], X_vals[i + 1]], [Y_vals[i], Y_vals[i + 1]], color=colors[i//40],linewidth=0.5,label=dataset[i//40])
            else:
                line.append(line_tmp)
        sns.scatterplot(x='bin', y='val', hue=[col for col in colors for _ in range(40)], style='class', data=df, ax=ax, alpha=1, s=10)
        
        ax.get_legend().remove()
        return line